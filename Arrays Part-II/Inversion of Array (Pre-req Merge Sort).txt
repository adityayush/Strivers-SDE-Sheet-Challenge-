#include <bits/stdc++.h>

long long int count =0;
long long getInversions(long long *arr, long long N) {

  mergesort(arr, 0, N - 1);
  return count;
}
long long int*mergesort(long long arr[], long long low, long long high)
 {

     if(low==high){
         long long int*ans = new long long int[1];
         ans[0]=arr[low];
         return ans;

     }

long long mid=low+ (high-low)/2;
long long int* left= mergesort(arr,low,mid);
long long int* right= mergesort(arr,mid+1,high);
return mergearrays(left,right,mid-low+1,high-mid);

}

long long int*mergesort(long long int* left, long long int* right, int n,int m){
    int i=0;
    int j=0;
    long long int* ans=new long long int[n+m+1];
    int k=0;
    while(i<n && j<m){
        if(left[i]=right[j]){
            ans[k++]=right[j++];

        }
        else{
             ans[k++]=right[j++];
             count+=n-i;

        }
    }
    while(i<n)
    ans[k++]=left[i++];
 while(i<n)
    ans[k++]=left[i++];

    return ans;
}

